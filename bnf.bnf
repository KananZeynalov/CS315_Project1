/BNF Notations/
<char> ::= A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z | a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z  
<digit> ::= 0|1|2|3|4|5|6|7|8|9
<sign> ::= + | -
<var> ::= <char><var_suffix>
<var_suffix> ::= <var_suffix><digit>|<var_suffix><char>|<char>|<digit>
<unsigned_int>::= <digit><unsigned_int>|<digit>
<integer> ::= <sign><unsigned_int> | <unsigned_int>
<op_assign>::= =
<op_add> ::= +
<op_sub>::= -
<op_mul> ::= *
<op_div> ::= /
<op_mod> ::= %
<op_expo> ::= **
<op_eq> ::= ==
<op_le> ::= <=
<op_ge> ::= >=
<op_lt> ::= <
<op_gt> ::= >
<op_and> ::= &&
<op_or> ::= ||
<rp> ::= )
<lp> ::= (
<end_stmt> ::= ;
<op_addsub> ::= <op_add> | <op_sub>
<op_muldiv> ::= <op_mul> | <op_div>
<op_logical> ::= <op_and> | <op_or>
/* Operation precedence "()"="*">"%">""="/">"+"="-"   all the equalities have left associations */
<op_arithmetic> ::= <op_addsub> | <op_muldiv>
<term> ::= <var> | <integer> | <function_calling>
<expo_term> ::= <expo_term> <op_expo> <term> | <lp> <arithmetic_expr> <rp> | <term>
<mod_term> ::= <mod_term> <op_mod> <expo_term> | <expo_term>
<factor> ::= <factor> <op_muldiv> <mod_term> |<mod_term> 
<arithmetic_expr> ::=<arithmetic_expr> <op_addsub> <factor> | <factor>
<assign_stmt> ::= <var> <op_assign> <arithmetic_expr>
<op_compare> ::= <op_gt> | <op_lt> | <op_le> | <op_ge>
<compare> ::= <compare> <op_compare> <term> | <term>
<logical_expr> ::= <logical_expr> <op_logical> <compare> | <compare>
<program> ::= <stmt_list>
<stmt_list> ::= <stmt_list><stmt><end_stmt>|<stmt><end_stmt>
<stmt> ::= <assign_stmt>
        | <if_stmt>  # should be changed 
        | <funct_tmt>
        | <while_stmt>
        | <return_stmt>
        | <comment_stmt>
        | <function_calling_stmt>
<while> ::= while
<openBrace> ::= {
<closeBrace> ::= }
<while_stmt>::= <while> <lp> <logical_expr> <rp> <openBrace> <stmt_list> <closeBrace>

<if> ::= if
<else> ::= else 
<if_stmt> ::= <if> <lp> <logical_expr> <rp> <openBrace> <stmt_list> <closeBrace>
            | <if> <lp> <logical_expr> <rp> <openBrace> <stmt_list> <closeBrace> <else> <openBrace> <stmt_list> <closeBrace>
<inSymbol> ::= >>
<outSymbol> ::= <<
<cout>::= cout
<cin> ::= cin
<string> ::= <char> <string> | <digit> <string> | " " <string> 
<string_literal> ::= "\"" <string> "\""


<input_stmt> ::= <cin> <inSymbol> <var>  <end_stmt> # cin >> 4 ; 
<output_expr> ::= <output_contents> | <output_contents> <output_expr>
<output_contents> ::= <logical_expr> | <string_literal> 
<output_stmt> ::= <cout> <outSymbol> <output_expr> <end_stmt>
<sb_open>::= [
<sb_close> ::= ]
<list_items> ::=  <list_items>,int| int # 1,2,3,4,5,7,9
<list> ::= <sb_open> list_items <sb_close> # [1,2,4,7,8]
<list_assignment> ::= <var><sb_open><integer><sb_close><op_assign> <list> #arr[3] = [11,13,03]
<array_properties> ::= .assign<lp><integer>,<integer><rp>
    |.get<lp><integer><rp>
    |.length<lp><rp>
<array_expr> ::= <var>.<array_properties>
<comment>:: = <comment_init> <comment_text>
<comment_text>::= <string>
<comment_init> ::= # 
<nl> ::= \n

<return_stmt> ::= return <arithmetic_expr> 
<type>::= int | int[]
<function_name> ::= <var>
<param_list>::= <type> <var> | <type> <var> , <param_list>
<function_declaration> ::=  function <function_name> < lp > < param_list> < rp> <openBrace> <stmt_list><return_stmt><end_stmt><closeBrace>
<main_declaration>::= function main<lp><rp><openBrace><stmt_list><return_stmt><end_stmt><closeBrace>
<function_calling_stmt> ::= <function_name> <lp> <param_list> <rp>
<function_list>::= <function_declaration> <function_list> | <main_declaration>







### the real part temize çekilmiş hali ###
<program>::= <function_list>
<function_list>::= <function_declaration> <function_list> | <main_declaration>
<function_declaration> ::=  function <function_name> <lp> <param_list> <rp> <openBrace> <stmt_list> <return_stmt> <end_stmt> <closeBrace>
<main_declaration>::= function main<lp><rp><openBrace><stmt_list><return_stmt><end_stmt><closeBrace>
<stmt_list> ::= <stmt_list><stmt><end_stmt>|<stmt><end_stmt>
<stmt> ::= <assign_stmt>
        | <if_stmt>  # should be changed 
        | <function_calling_stmt>
        | <while_stmt>
        | <input_stmt>
        | <output_stmt>
        | <return_stmt>
        | <comment_stmt>
        | <function_calling_stmt>

<return_stmt> ::= return <arithmetic_expr> 

<comment_stmt>:: = <comment_init> <comment_text>
<comment_text>::= <string>
<comment_init> ::= # 

<function_calling_stmt> ::= <function_name> <lp> <param_list> <rp>
<type>::= int | int[]
<function_name> ::= <var>
<param_list>::= <type> <var> | <type> <var> , <param_list>

<while> ::= while
<openBrace> ::= {
<closeBrace> ::= }
<while_stmt>::= <while> <lp> <logical_expr> <rp> <openBrace> <stmt_list> <closeBrace>

<if_stmt> ::= <if> <lp> <logical_expr> <rp> <openBrace> <stmt_list> <closeBrace>
            | <if> <lp> <logical_expr> <rp> <openBrace> <stmt_list> <closeBrace> <else> <openBrace> <stmt_list> <closeBrace>
<if> ::= if
<else> ::= else 
<logical_expr> ::= <logical_expr> <op_logical> <compare> | <compare>

<output_stmt> ::= <cout> <outSymbol> <arithmetic_expr>
                    |<cout> <outSymbol> <string>
<input_stmt> ::= <cin><inSymbol><var>
<inSymbol> ::= >>
<outSymbol> ::= <<
<cout>::= cout
<cin> ::= cin
<string> ::= <char> <string> | <digit> <string> | " " <string> 
<string_literal> ::= "\"" <string> "\""

<array_expr> ::= <var>.<array_properties>
<array_properties> ::= .assign<lp><integer>,<integer><rp>
    |.length<lp><rp>
    |.get<lp><integer><rp>
<list_assignment> ::= <var><sb_open><integer><sb_close><op_assign> <list> #arr[3] = [11,13,03]
<list> ::= <sb_open> list_items <sb_close> # [1,2,4,7,8]
<list_items> ::=  <list_items>,int| int # 1,2,3,4,5,7,9
<sb_open>::= [
<sb_close> ::= ]

<assign_stmt> ::= <var> <op_assign> <arithmetic_expr>
<arithmetic_expr> ::=<arithmetic_expr> <op_addsub> <factor> | <factor>
<factor> ::= <factor> <op_muldiv> <mod_term> |<mod_term> 
<mod_term> ::= <mod_term> <op_mod> <expo_term> | <expo_term>
<expo_term> ::= <expo_term> <op_expo> <term> | <lp> <arithmetic_expr> <rp> | <term>
<term> ::= <var> | <integer> | <function_calling>

<op_logical> ::= <op_and> | <op_or>
<op_arithmetic> ::= <op_addsub> | <op_muldiv>
<op_muldiv> ::= <op_mul> | <op_div>
<op_addsub> ::= <op_add> | <op_sub>
<op_assign>::= =
<op_add> ::= +
<op_sub>::= -
<op_mul> ::= *
<op_div> ::= /
<op_mod> ::= %
<op_expo> ::= **
<op_eq> ::= ==
<op_le> ::= <=
<op_ge> ::= >=
<op_lt> ::= <
<op_gt> ::= >
<op_and> ::= &&
<op_or> ::= ||
<rp> ::= )
<lp> ::= (
<end_stmt> ::= ;

<var> ::= <char><var_suffix>
<var_suffix> ::= <var_suffix><digit>|<var_suffix><char>|<char>|<digit>
<unsigned_int>::= <digit><unsigned_int>|<digit>
<integer> ::= <sign><unsigned_int> | <unsigned_int>
<sign> ::= + | -
<digit> ::= 0|1|2|3|4|5|6|7|8|9
<char> ::= A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z | a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z  